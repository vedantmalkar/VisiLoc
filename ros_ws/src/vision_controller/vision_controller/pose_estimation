import cv2 as cv 
import numpy as np 

#(these values are taken from URDF if bot)


image_width = 800
image_height = 600
horizontal_fov = 1.3962634  

fx = (image_width / 2.0) / np.tan(horizontal_fov / 2.0)
fy = fx

cx = image_width / 2.0
cy = image_height / 2.0

dist_coef = np.zeros(5, dtype=np.float64)

cam_mat = np.array([[fx, 0, cx],
                    [0, fy, cy],
                    [0, 0, 1]], dtype=np.float32)

marker_dict = cv.aruco.getPredefinedDictionary(cv.aruco.DICT_4X4_50)
param_markers = cv.aruco.DetectorParameters()

def detect_aruco_markers(frame, marker_size=0.06, draw_markers=True):
    gray_frame = cv.cvtColor(frame, cv.COLOR_BGR2GRAY)
    marker_corners, marker_IDs, rejected = cv.aruco.detectMarkers(
        gray_frame, marker_dict, parameters=param_markers)
    
    annotated_frame = frame.copy()
    distance = None
    pose = None

    if marker_corners and marker_IDs is not None:
        rVec, tVec, _ = cv.aruco.estimatePoseSingleMarkers(marker_corners, marker_size, cam_mat, dist_coef)
    
        rvec = rVec[0][0]
        tvec = tVec[0][0]
        corners = marker_corners[0]
        marker_id = marker_IDs[0][0]

        distance = np.sqrt(tvec[0]**2 + tvec[1]**2 + tvec[2]**2)

        pose = {
            'x': float(tvec[0]),
            'y': float(tvec[1]),
            'z': float(tvec[2]),
            'rvec': rvec,
            'tvec': tvec
        }
    
        if draw_markers:
            cv.polylines(annotated_frame,[corners.astype(np.int32)], True, (0, 255, 255), 4, cv.LINE_AA)
            corners_reshaped = corners.reshape(4, 2).astype(int)
            top_right = corners_reshaped[0]
            bottom_right = corners_reshaped[2]

            cv.drawFrameAxes(annotated_frame, cam_mat, dist_coef,rvec,tvec, 
                0.03,  
                3
            )

            cv.putText(
                annotated_frame,
                f"ID: {marker_id} Dist: {distance:.2f}m",
                top_right,
                cv.FONT_HERSHEY_PLAIN,
                1.3,
                (0, 0, 255),
                2,
                cv.LINE_AA,
            )
    
            cv.putText(
                annotated_frame,
                f"x:{tvec[0]:.2f} y:{tvec[1]:.2f}",
                bottom_right,
                cv.FONT_HERSHEY_PLAIN,
                1.0,
                (0, 0, 255),
                2,
                cv.LINE_AA,
            )

    return annotated_frame, distance, pose

